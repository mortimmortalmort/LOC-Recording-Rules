Write-Host " (        )          (                  )   (    (     (        )           (        )   (     (               )  " -ForegroundColor White
Write-Host " )\ )  ( /(    (     )\ )        (   ( /(   )\ ) )\ )  )\ )  ( /(  (        )\ )  ( /(   )\ )  )\ )   (     ( /(  " -ForegroundColor White
Write-Host "(()/(  )##))   )\   (()/( (      )\  )##)) (()/((()/( (()/(  )##)) )\ )    (()/(  )##)) (()/( (()/(   )\    )##)) " -ForegroundColor White
Write-Host " /(_))((_)\  (((_)   /(_)))\   (((_)((_)\   /(_))/(_)) /(_))((_)\ (()/(     /(_))((_)\   /(_)) /(_))(((_)  ((_)\  " -ForegroundColor White
Write-Host "(_))    ((_) )\___  (_)) ((_)  )\___  ((_) (_)) (_))_ (_))   _((_) /(_))_  (_))    ((_) (_))  (_))  )\___ __ ((_) " -ForegroundColor White
Write-Host "| |    / _ ##(/ __| | _ \| __|((/ __|/ _ \ | _ \ |   \|_ _| | \| |(_)) __|  | _ \  / _ \ | |   |_ _|((/ __|\ \ / / " -ForegroundColor White
Write-Host "| |__ | (_) || (__  |   /| _|  | (__| (_) ||   / | |) || |  | .  |  | (_    |  _/ | (_) || |__  | |  | (__  \ V /  " -ForegroundColor White
Write-Host "|____| \___/  \___| |_|_\|___|  \___|\___/ |_|_\ |___/|___| |_|\_|   \___|  |_|    \___/ |____||___|  \___|  |_|   " -ForegroundColor White
Write-Host ""
Write-Host "  Made by JustValkz " -ForegroundColor Blue -NoNewline
Write-Host " - LOC PowerShell T1-T3" -ForegroundColor White
Write-Host ""

for ($i = 0; $i -le 10; $i++) {
    $percent = $i * 10
    $bar = "#" * $i + "-" * (10 - $i)
    Write-Host "`r[ $bar ] $percent%" -NoNewline
    Start-Sleep -Milliseconds 300
}
Write-Host ""

$exclusionsOutput = @()
$threatsOutput = @()
$windowsOutput = @()
$memoryIntegrityOutput = @()
$defenderOutput = @()
$registryOutput = @()
$drivesOutput = @()
$exploitOutput = @()
$prefetchOutput = @()
$keyAuthOutput = @()

$blacklist = @("matcha", "olduimatrix", "autoexe", "bin", "workspace", "monkeyaim", "thunderaim", "thunderclient", "celex", "release", "matrix", "matcha.exe", "triggerbot", "solara", "xeno", "wave", "cloudy", "tupical", "horizon", "myst", "celery", "zarora", "juju", "nezure", "FusionHacks.zip", "release.zip", "bootstrapper", "aimmy.exe", "aimmy", "Fluxus", "clumsy", "build", "build.zip", "build.rar", "MystW.exe", "isabelle", "dx9", "dx9ware")
$suspiciousList = @("isabelle", "xeno", "solara", "bootstrapper", "bootstrappernew", "loader", "santoware", "mystw", "severe", "mapper", "thunderclient", "monkeyaim", "olduimatrix", "matrix", "matcha")
$watchlist = @("BOOTSTRAPPERNEW.EXE", "BOOTSTRAPPER.EXE", "XENO.EXE", "XENOUI.EXE", "SOLARA.EXE", "MAPPER.EXE", "LOADER.EXE", "MATCHA.EXE", "EVOLVE.EXE")

# --- Check for exclusion paths
try {
    $exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
    $exclusionsOutput += if ($exclusions) {
        "FAILURE: Exclusion paths detected:`n$($exclusions -join "`n")"
    } else {
        "SUCCESS: No Exclusions were found at the moment."
    }
} catch {
    $exclusionsOutput += "WARNING: Could not get exclusion paths. MUST RUN AS ADMINISTRATOR!"
}

# --- Check for active or past threats
try {
    $threats = Get-MpThreat
    if ($threats) {
        foreach ($threat in $threats) {
            $line = "$($threat.ThreatName) | Status: $($threat.Status) | ActionSuccess: $($threat.ActionSuccess) | Resources: $($threat.Resources)"
            if ($threat.Status -eq "Active" -or $threat.ActionSuccess -eq $false -or $threat.Status -eq "Allowed") {
                $threatsOutput += "FAILURE: $line"
            } elseif ($threat.Status -eq "Quarantined" -or $threat.Status -eq "Resolved") {
                $threatsOutput += "SUCCESS: $line"
            } else {
                $threatsOutput += "FAILURE: Uncertain threat status - $line"
            }
        }
    } else {
        $threatsOutput += "SUCCESS: No threats detected."
    }
} catch {
    $threatsOutput += "WARNING: Could not check for threats."
}

# --- OS verification
try {
    if ($env:OS -eq "Windows_NT" -and (Get-CimInstance Win32_OperatingSystem -ErrorAction Stop)) {
        $windowsOutput += "SUCCESS: Running on real Windows."
    } else {
        $windowsOutput += "FAILURE: Not running on real Windows."
    }
} catch {
    $windowsOutput += "FAILURE: Not running on real Windows."
}

# --- Memory integrity
try {
    $regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"
    $enabled = Get-ItemPropertyValue -Path $regPath -Name "Enabled" -ErrorAction Stop
    $memoryIntegrityOutput += "SUCCESS: MEMORY INTEGRITY IS SUPPORTED."
    $memoryIntegrityOutput += if ($enabled -eq 1) {
        "SUCCESS: MEMORY INTEGRITY IS ON."
    } else {
        "FAILURE: MEMORY INTEGRITY IS OFF."
    }
} catch {
    $memoryIntegrityOutput += "FAILURE: MEMORY INTEGRITY IS NOT SUPPORTED."
}

# --- Defender check
try {
    $defender = Get-MpComputerStatus
    if ($defender.AMServiceEnabled) {
        if (-not $defender.RealTimeProtectionEnabled) {
            try {
                Set-MpPreference -DisableRealtimeMonitoring $false
                Start-MpWDOScan
                $defenderOutput += "FAILURE: Realtime protection was OFF and is now being enabled through scan."
            } catch {
                $defenderOutput += "WARNING: Could not enable realtime protection or start scan."
            }
        } else {
            $defenderOutput += "SUCCESS: Realtime protection is ENABLED."
        }
    } else {
        $defenderOutput += "FAILURE: Windows Defender is NOT running or is DISABLED."
    }
} catch {
    $defenderOutput += "WARNING: Could not check realtime protection status."
}

# --- Registry tracking of suspicious EXE
try {
    $muiPath = "HKCU:\SOFTWARE\Classes\Local Settings\Software\Microsoft\Windows\Shell\MuiCache"
    $registryEntries = Get-ItemProperty -Path $muiPath -ErrorAction Stop | Select-Object -Property *
    foreach ($prop in $registryEntries.PSObject.Properties) {
        $propNameLower = $prop.Name.ToLower()
        foreach ($word in $blacklist) {
            if ($propNameLower -like "*$word*") {
                if ($suspiciousList -contains $word) {
                    $registryOutput += "WARNING: Detected suspicious registry key: $($prop.Name)"
                }
                break
            }
        }
    }
} catch {
    $registryOutput += "WARNING: Could not access registry path for .exe tracking."
}

# --- Drive usage
try {
    $drives = Get-PSDrive -PSProvider FileSystem
    foreach ($drive in $drives) {
        $used = [math]::Round($drive.Used / 1GB, 2)
        $total = [math]::Round(($drive.Used + $drive.Free) / 1GB, 2)
        $drivesOutput += "Drive: $($drive.Name) | Used: $used GB / $total GB"
    }
} catch {
    $drivesOutput += "WARNING: Could not enumerate drives."
}

# --- EXPLOIT HASH + FOLDER CHECK (UPDATED)
try {
    $knownHash = "A89E3321B2BC0A90C21714F153E26DCF2BDEA4BC7200AF9C8CA8394FF54470A1"
    $appdataFolderExists = Test-Path "$env:APPDATA\Isabelle"

    if ($knownHash -eq "A89E3321B2BC0A90C21714F153E26DCF2BDEA4BC7200AF9C8CA8394FF54470A1" -and $appdataFolderExists) {
        $exploitOutput += "FAILURE: Exploit Detected - SHA256 match and Isabelle folder found in %AppData%"
    } else {
        $exploitOutput += "SUCCESS: Isabelle and Evolve were not found."
    }
} catch {
    $exploitOutput += "WARNING: Exploit hash check failed."
}

# --- Prefetch file scan
try {
    $now = Get-Date
    $pfFiles = Get-ChildItem "C:\Windows\Prefetch" -Filter "*.pf" -ErrorAction Stop
    foreach ($pf in $pfFiles) {
        $name = $pf.BaseName.ToUpper()
        $lastWrite = $pf.LastWriteTime
        $hoursAgo = [math]::Round(($now - $lastWrite).TotalHours, 2)
        if ($watchlist -contains "$name.EXE") {
            $prefetchOutput += "WARNING: Suspicious prefetch file: $name | Modified: $hoursAgo hours ago"
        } else {
            $prefetchOutput += "Detected Prefetch File: $name | Modified: $hoursAgo hours ago"
        }
    }
} catch {
    $prefetchOutput += "WARNING: Prefetch files could not be listed or access denied."
}

# --- KeyAuth folder scan
try {
    $folders = Get-ChildItem "C:\ProgramData\KeyAuth\debug" -Directory -ErrorAction Stop
    foreach ($folder in $folders) {
        $keyAuthOutput += "FAILURE: External Cheat/Key Detected ($($folder.Name))"
    }
} catch {
    $keyAuthOutput += "SUCCESS: No folders detected in Key Checker."
}

# --- Print formatted output
function Write-Section {
    param(
        [string]$Title,
        [string[]]$Lines
    )
    Write-Host "--- $Title ---" -ForegroundColor White
    foreach ($line in $Lines) {
        if ($line -match "^SUCCESS") {
            Write-Host $line -ForegroundColor Green
        } elseif ($line -match "^FAILURE") {
            Write-Host $line -ForegroundColor Red
        } elseif ($line -match "^WARNING") {
            Write-Host $line -ForegroundColor Yellow
        } else {
            Write-Host $line -ForegroundColor White
        }
    }
}

Write-Section "Exclusions" $exclusionsOutput
Write-Section "Threats" $threatsOutput
Write-Section "OS Check" $windowsOutput
Write-Section "Memory Integrity" $memoryIntegrityOutput
Write-Section "Windows Defender" $defenderOutput
Write-Section "Registry Check" $registryOutput
Write-Section "Drives Check" $drivesOutput
Write-Section "Exploit Checker" $exploitOutput
Write-Section "Prefetch" $prefetchOutput
Write-Section "Key Checker" $keyAuthOutput

$sections = @(
    $exclusionsOutput, $threatsOutput, $windowsOutput, $memoryIntegrityOutput,
    $defenderOutput, $registryOutput, $drivesOutput, $exploitOutput,
    $prefetchOutput, $keyAuthOutput
)

$sectionSuccessCount = 0
foreach ($section in $sections) {
    if ($section -notcontains ($section | Where-Object { $_ -match '^FAILURE' })) {
        $sectionSuccessCount++
    }
}

$totalSections = $sections.Count
$successRate = [math]::Round(($sectionSuccessCount / $totalSections) * 100, 2)
$failures = $totalSections - $sectionSuccessCount
$warnings = ($sections | ForEach-Object { $_ | Where-Object { $_ -match '^WARNING' } }).Count

Write-Host ""
Write-Host "--- Summary ---" -ForegroundColor White
$color = if ($successRate -eq 100) { "Green" } else { "Red" }
Write-Host "Success Rate: $successRate% ($sectionSuccessCount / $totalSections)" -ForegroundColor $color
Write-Host "Section Failures: $failures" -ForegroundColor Red
Write-Host "Warnings: $warnings" -ForegroundColor Yellow
$endTime = Get-Date
$duration = $endTime - $startTime
Write-Host "Completed in $($duration.TotalSeconds) seconds." -ForegroundColor Red
Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Blue
